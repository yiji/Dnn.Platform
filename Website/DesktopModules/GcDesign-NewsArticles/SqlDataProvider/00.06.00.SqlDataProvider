ALTER TABLE {databaseOwner}{objectQualifier}GcDesign_Searches_Comment ADD
	isApproved bit NOT NULL CONSTRAINT DF_{objectQualifier}GcDesign_Searches_Comment_isApproved DEFAULT 1,
	approvedBy int NULL
GO

DROP PROCEDURE {databaseOwner}{objectQualifier}GcDesign_Searches_AddComment
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GcDesign_Searches_AddComment
	@ArticleID int,
	@UserID int, 
	@Comment ntext,
	@RemoteAddress nvarchar(50) ,
	@Type int,
	@TrackbackUrl nvarchar(255),
	@TrackbackTitle nvarchar(255),
	@TrackbackBlogName nvarchar(255),
	@TrackbackExcerpt ntext,
	@AnonymousName nvarchar(255),
	@AnonymousEmail nvarchar(255),
	@AnonymousURL nvarchar(255),
	@NotifyMe bit,
	@IsApproved bit,
	@ApprovedBy int
AS

INSERT INTO {databaseOwner}{objectQualifier}GcDesign_Searches_Comment (
	[ArticleID],
	[UserID], 
	[Comment],
	[RemoteAddress],
	[Type],
	[TrackbackUrl],
	[TrackbackTitle],
	[TrackbackBlogName],
	[TrackbackExcerpt],
	[AnonymousName], 
	[AnonymousEmail],
	[AnonymousURL],
	[NotifyMe],
	[IsApproved],
	[ApprovedBy]
) VALUES (
	@ArticleID,
	@UserID, 
	@Comment,
	@RemoteAddress,
	@Type,
	@TrackbackUrl,
	@TrackbackTitle,
	@TrackbackBlogName,
	@TrackbackExcerpt,
	@AnonymousName,
	@AnonymousEmail,
	@AnonymousURL,
	@NotifyMe,
	@IsApproved,
	@ApprovedBy  
)

select SCOPE_IDENTITY()
GO

DROP PROCEDURE {databaseOwner}{objectQualifier}GcDesign_Searches_UpdateComment
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GcDesign_Searches_UpdateComment
	@CommentID int, 
	@ArticleID int, 
	@UserID int, 
	@Comment ntext,
	@RemoteAddress nvarchar(50),
 	@Type int,
	@TrackbackUrl nvarchar(255),
	@TrackbackTitle nvarchar(255),
	@TrackbackBlogName nvarchar(255),
	@TrackbackExcerpt ntext,
	@AnonymousName nvarchar(255),
	@AnonymousEmail nvarchar(255),
	@AnonymousURL nvarchar(255),
	@NotifyMe bit,
	@IsApproved bit,
	@ApprovedBy int 
AS

UPDATE {databaseOwner}{objectQualifier}GcDesign_Searches_Comment SET
	[ArticleID] = @ArticleID,
	[UserID] = @UserID, 
	[Comment] = @Comment,
	[RemoteAddress] = @RemoteAddress,
	[Type] = @Type,
	[TrackbackUrl] = @TrackbackUrl,
	[TrackbackTitle] = @TrackbackTitle,
	[TrackbackBlogName] = @TrackbackBlogName,
	[TrackbackExcerpt] = @TrackbackExcerpt,
	[AnonymousName] = @AnonymousName,
	[AnonymousEmail] = @AnonymousEmail,
	[AnonymousURL] = @AnonymousURL,
	[NotifyMe] = @NotifyMe,
	[IsApproved] = @IsApproved,
	[ApprovedBy] = @ApprovedBy 
WHERE
	[CommentID] = @CommentID
GO

DROP PROCEDURE {databaseOwner}{objectQualifier}GcDesign_Searches_GetCommentList
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GcDesign_Searches_GetCommentList
	@ModuleID	int,
	@ArticleID	int,
	@IsApproved bit 
AS

SELECT
	Comment.[CommentID],
	Comment.[ArticleID],
	Comment.[UserID], 
	Comment.[CreatedDate],
	Comment.[Comment],
	Comment.[RemoteAddress],
	Comment.[Type],
	Comment.[TrackbackUrl],
	Comment.[TrackbackTitle],
	Comment.[TrackbackBlogName],
	Comment.[TrackbackExcerpt], 
	Comment.[AnonymousName], 
	Comment.[AnonymousEmail], 
	Comment.[AnonymousURL],
	Comment.[NotifyMe],  
	Comment.[IsApproved],  
	Comment.[ApprovedBy],  
	Author.[Email] as AuthorEmail,
	Author.[UserName] as AuthorUserName,
	Author.[FirstName] as AuthorFirstName,
	Author.[LastName] as AuthorLastName
FROM
	{databaseOwner}{objectQualifier}GcDesign_Searches_Comment Comment INNER JOIN
		{databaseOwner}{objectQualifier}GcDesign_Searches_Article Article on Comment.ArticleID = Article.ArticleID LEFT OUTER JOIN
		{databaseOwner}{objectQualifier}Users Author ON Comment.UserID = Author.UserID
WHERE
	Article.ModuleID = @ModuleID
	and
	(@ArticleID is null OR Comment.[ArticleID] = @ArticleID)
	and
	Comment.IsApproved = @IsApproved
ORDER BY
	Comment.[CreatedDate] ASC
GO

DROP PROCEDURE {databaseOwner}{objectQualifier}GcDesign_Searches_GetComment
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GcDesign_Searches_GetComment
	@CommentID int
AS

SELECT
	Comment.[CommentID],
	Comment.[ArticleID],
	Comment.[UserID], 
	Comment.[CreatedDate],
	Comment.[Comment],
	Comment.[RemoteAddress],
	Comment.[Type],
	Comment.[TrackbackUrl],
	Comment.[TrackbackTitle],
	Comment.[TrackbackBlogName],
	Comment.[TrackbackExcerpt], 
	Comment.[AnonymousName], 
	Comment.[AnonymousEmail], 
	Comment.[AnonymousURL], 
	Comment.[NotifyMe], 
	Comment.[IsApproved],  
	Comment.[ApprovedBy],  
	Author.[Email] as AuthorEmail,
	Author.[UserName] as AuthorUserName,
	Author.[FirstName] as AuthorFirstName,
	Author.[LastName] as AuthorLastName
FROM
	{databaseOwner}{objectQualifier}GcDesign_Searches_Comment Comment LEFT OUTER JOIN
		{databaseOwner}{objectQualifier}Users Author ON Comment.UserID = Author.UserID
WHERE
	[CommentID] = @CommentID
GO
	
DROP PROCEDURE {databaseOwner}{objectQualifier}GcDesign_Searches_GetArticleListBySearchCriteria
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GcDesign_Searches_GetArticleListBySearchCriteria
	@ModuleID	int,
	@CategoryID	varchar(255),
	@CategoryIDCount	int,
	@MaxCount	int,
	@MaxAge	int,
	@IsApproved	bit,
	@IsDraft	bit,
	@StartDate	datetime,
	@KeyWords	varchar(255), 
	@ShowPending	bit,
	@ShowExpired bit,   
	@AuthorID	int,
	@ShowFeaturedOnly bit,
	@ShowNotFeaturedOnly bit,
	@SortBy varchar(50),
	@SortDirection varchar(50),
	@Month	int,
	@Year	int 
AS

DECLARE @strTop	nvarchar(2000)
DECLARE @strWhere	nvarchar(2000)

SELECT @strTop = ''
SELECT @strWhere = ' 1 = 1 '

IF (@MaxCount is not null)
	SELECT @strTop = ' TOP ' + convert(nvarchar, @MaxCount)

IF (@ModuleID is not null)
	SELECT @strWhere = @strWhere + ' AND Article.ModuleID = ' + convert(nvarchar, @ModuleId)

IF (@CategoryId is not null)
	if(@CategoryIDCount is not null)
		SELECT @strWhere = @strWhere + ' AND Article.ArticleID in ( select ArticleID from {databaseOwner}{objectQualifier}GcDesign_Searches_ArticleCategories where {databaseOwner}{objectQualifier}GcDesign_Searches_ArticleCategories.ArticleID = Article.ArticleID and {databaseOwner}{objectQualifier}GcDesign_Searches_ArticleCategories.CategoryID in (' + @CategoryID + ') group by articleID having count(*) > ' + convert(nvarchar, @CategoryIDCount) + ')'
	else
		SELECT @strWhere = @strWhere + ' AND Article.ArticleID in ( select ArticleID from {databaseOwner}{objectQualifier}GcDesign_Searches_ArticleCategories where {databaseOwner}{objectQualifier}GcDesign_Searches_ArticleCategories.ArticleID = Article.ArticleID and {databaseOwner}{objectQualifier}GcDesign_Searches_ArticleCategories.CategoryID in (' + @CategoryID + '))'

IF (@AuthorID is not null)
	SELECT @strWhere = @strWhere + ' AND Article.AuthorID = ' + convert(nvarchar, @AuthorID)

IF (@MaxAge is not null) and (@ShowPending is null or @ShowExpired is null) 
	SELECT @strWhere = @strWhere + ' AND Article.StartDate > ''' + convert(nvarchar, DateAdd(day, @MaxAge, @StartDate)) + ''''

IF (@MaxAge is not null) and (@ShowPending is null or @ShowExpired is null) 
	SELECT @strWhere = @strWhere + ' AND Article.StartDate < ''' + convert(nvarchar, @StartDate)  + ''''

IF (@IsApproved = 1 )
	SELECT @strWhere = @strWhere + ' AND Article.IsApproved = 1'

IF (@IsApproved = 0 )
	SELECT @strWhere = @strWhere + ' AND Article.IsApproved = 0'

IF (@IsDraft = 0)
	SELECT @strWhere = @strWhere + ' AND Article.IsDraft = 0'

IF (@IsDraft = 1 )
	SELECT @strWhere = @strWhere + ' AND Article.IsDraft = 1'

IF (@ShowFeaturedOnly = 1 )
	SELECT @strWhere = @strWhere + ' AND Article.IsFeatured = 1'
	
IF (@ShowNotFeaturedOnly = 1 )
	SELECT @strWhere = @strWhere + ' AND Article.IsFeatured = 0'

IF (@Keywords is not null)
	SELECT @strWhere = @strWhere + ' AND (Article.Title LIKE ''%' + @Keywords + '%'' OR Article.Summary LIKE ''%' + @Keywords + '%'' OR ((select count(*) from {databaseOwner}{objectQualifier}GcDesign_Searches_Page Page where Page.ArticleID = Article.ArticleID and Page.PageText LIKE ''%' + @Keywords + '%'') > 0))'

IF (@ShowPending is null) 
	SELECT @strWhere = @strWhere + ' AND (Article.StartDate is null or Article.StartDate < ''' + convert(nvarchar, DateAdd(mi, 1, GetDate()))  + ''')'

IF (@ShowExpired is null) 
	SELECT @strWhere = @strWhere + ' AND (Article.EndDate is null or Article.EndDate > ''' + convert(nvarchar, GetDate())  + ''')'

IF (@Month is not null)
	SELECT @strWhere = @strWhere + ' AND Month(Article.StartDate) = ' + convert(nvarchar, @Month)

IF (@Year is not null)
	SELECT @strWhere = @strWhere + ' AND Year(Article.StartDate) = ' + convert(nvarchar, @Year)
	
EXEC('
SELECT ' + @strTop + '
	Article.[ArticleID],
	Article.[AuthorID],
	Article.[ApproverID],
	Article.[CreatedDate],
	Article.[LastUpdate],
	Article.[Title],
	Article.[Summary],
	Article.[IsApproved],
	Article.[NumberOfViews],
	Article.[StartDate],
	Article.[EndDate],
	Article.[ModuleID],
	Article.[IsFeatured],
	Article.[ImageUrl],
	Article.[LastUpdateID],
	Article.[IsSecure],
	Article.[IsNewWindow],
	Author.[Email] as AuthorEmail,
	Author.[UserName] as AuthorUserName,
	Author.[FirstName] as AuthorFirstName,
	Author.[LastName] as AuthorLastName,
	Author.[DisplayName] as AuthorDisplayName,
	Updated.[Email] as LastUpdateEmail,
	Updated.[UserName] as LastUpdateUserName,
	Updated.[FirstName] as LastUpdateFirstName,
	Updated.[LastName] as LastUpdateLastName,
	Updated.[DisplayName] as LastUpdateDisplayName,
	(select count(*) from {databaseOwner}{objectQualifier}GcDesign_Searches_Page where {databaseOwner}{objectQualifier}GcDesign_Searches_Page.ArticleID = Article.ArticleID) as ''PageCount'',
	(select count(*) from {databaseOwner}{objectQualifier}GcDesign_Searches_Comment where {databaseOwner}{objectQualifier}GcDesign_Searches_Comment.ArticleID = Article.ArticleID and {databaseOwner}{objectQualifier}GcDesign_Searches_Comment.IsApproved = 1) as ''CommentCount'', 
	(select AVG(rating) from {databaseOwner}{objectQualifier}GcDesign_Searches_Rating where {databaseOwner}{objectQualifier}GcDesign_Searches_Rating.ArticleID = Article.ArticleID) as ''Rating'', 
	(select count(*) from {databaseOwner}{objectQualifier}GcDesign_Searches_Rating where {databaseOwner}{objectQualifier}GcDesign_Searches_Rating.ArticleID = Article.ArticleID) as ''RatingCount'', 
	''ImageUrlResolved'' = case when Images.FileName is null then Article.ImageURL else Images.Folder + Images.FileName end, 
	''URL'' = case when UrlFiles.FileName is null then Article.URL else UrlFiles.Folder + UrlFiles.FileName end,
	UrlFiles.ContentType as ''FileContentType'',
	UrlFiles.Size as ''FileSize'' 

FROM
	{databaseOwner}{objectQualifier}GcDesign_Searches_Article Article LEFT OUTER JOIN 
    {databaseOwner}{objectQualifier}Users Author ON Article.AuthorID = Author.UserID LEFT OUTER JOIN 
    {databaseOwner}{objectQualifier}Users Updated ON Article.LastUpdateID = Updated.UserID LEFT OUTER JOIN 
    {databaseOwner}{objectQualifier}Files UrlFiles ON Article.URL = ''fileid='' + CONVERT(nvarchar, UrlFiles.FileID) LEFT OUTER JOIN
    {databaseOwner}{objectQualifier}Files Images ON Article.ImageUrl = ''fileid='' + CONVERT(nvarchar, Images.FileID)

WHERE ' + 
	@strWhere + '

ORDER BY 
	' + @SortBy + ' ' + @SortDirection)
GO

DROP PROCEDURE {databaseOwner}{objectQualifier}GcDesign_Searches_GetArticle
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GcDesign_Searches_GetArticle
	@ArticleID int
AS
SELECT
	Article.[ArticleID],
	Article.[AuthorID],
	Article.[ApproverID],
	Article.[CreatedDate],
	Article.[LastUpdate],
	Article.[Title],
	Article.[Summary],
	Article.[IsApproved],
	Article.[NumberOfViews],
	Article.[IsDraft],
	Article.[StartDate],
	Article.[EndDate],
	Article.[ModuleID],
	Article.[IsFeatured],
	Article.[ImageUrl],
	Article.[LastUpdateID],
	Article.[IsSecure],
	Article.[IsNewWindow],
	'' as AuthorEmail,
	Author.[UserName] as AuthorUserName,
	Author.[FirstName] as AuthorFirstName,
	Author.[LastName] as AuthorLastName,
	Author.[DisplayName] as AuthorDisplayName,
	'' as LastUpdateEmail,
	Updated.[UserName] as LastUpdateUserName,
	Updated.[FirstName] as LastUpdateFirstName,
	Updated.[LastName] as LastUpdateLastName,
	Updated.[DisplayName] as UpdatedDisplayName,
	(select count(*) from {databaseOwner}{objectQualifier}GcDesign_Searches_Comment where {databaseOwner}{objectQualifier}GcDesign_Searches_Comment.ArticleID = Article.ArticleID and {databaseOwner}{objectQualifier}GcDesign_Searches_Comment.IsApproved = 1) as 'CommentCount', 
	(select count(*) from {databaseOwner}{objectQualifier}GcDesign_Searches_Page where {databaseOwner}{objectQualifier}GcDesign_Searches_Page.ArticleID = Article.ArticleID) as 'PageCount', 
	(select AVG(rating) from {databaseOwner}{objectQualifier}GcDesign_Searches_Rating where {databaseOwner}{objectQualifier}GcDesign_Searches_Rating.ArticleID = Article.ArticleID) as 'Rating', 
	(select COUNT(*) from {databaseOwner}{objectQualifier}GcDesign_Searches_Rating where {databaseOwner}{objectQualifier}GcDesign_Searches_Rating.ArticleID = Article.ArticleID) as 'RatingCount', 
	'ImageUrlResolved' = case when Images.FileName is null then Article.ImageURL else Images.Folder + Images.FileName end, 
	'URL' = case when UrlFiles.FileName is null then Article.URL else UrlFiles.Folder + UrlFiles.FileName end 

FROM
	{databaseOwner}{objectQualifier}GcDesign_Searches_Article Article LEFT OUTER JOIN 
		{databaseOwner}{objectQualifier}Users Author ON Article.AuthorID = Author.UserID LEFT OUTER JOIN
		{databaseOwner}{objectQualifier}Users Updated ON Article.LastUpdateID = Updated.UserID LEFT OUTER JOIN
		{databaseOwner}{objectQualifier}Files UrlFiles ON Article.URL = 'fileid=' + CONVERT(nvarchar, UrlFiles.FileID) LEFT OUTER JOIN
        {databaseOwner}{objectQualifier}Files Images ON Article.ImageUrl = 'fileid=' + CONVERT(nvarchar, Images.FileID) 
WHERE	
	Article.[ArticleID] = @ArticleID
GO
