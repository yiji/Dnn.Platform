<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Module.Text" xml:space="preserve">
    <value>Article Module</value>
  </data>
  <data name="Module.Help" xml:space="preserve">
    <value>Set the article module to link to.</value>
  </data>
  <data name="ControlTitle_settings.Text" xml:space="preserve">
    <value>News Handout Settings</value>
  </data>
  <data name="A0.Text" xml:space="preserve">
    <value>A0</value>
  </data>
  <data name="A1.Text" xml:space="preserve">
    <value>A1</value>
  </data>
  <data name="A10.Text" xml:space="preserve">
    <value>A10</value>
  </data>
  <data name="A2.Text" xml:space="preserve">
    <value>A2</value>
  </data>
  <data name="A3.Text" xml:space="preserve">
    <value>A3</value>
  </data>
  <data name="A4.Text" xml:space="preserve">
    <value>A4</value>
  </data>
  <data name="A5.Text" xml:space="preserve">
    <value>A5</value>
  </data>
  <data name="A6.Text" xml:space="preserve">
    <value>A6</value>
  </data>
  <data name="A7.Text" xml:space="preserve">
    <value>A7</value>
  </data>
  <data name="A8.Text" xml:space="preserve">
    <value>A8</value>
  </data>
  <data name="A9.Text" xml:space="preserve">
    <value>A9</value>
  </data>
  <data name="ArchA.Text" xml:space="preserve">
    <value>ArchA</value>
  </data>
  <data name="ArchB.Text" xml:space="preserve">
    <value>ArchB</value>
  </data>
  <data name="ArchC.Text" xml:space="preserve">
    <value>ArchC</value>
  </data>
  <data name="ArchD.Text" xml:space="preserve">
    <value>ArchD</value>
  </data>
  <data name="ArchE.Text" xml:space="preserve">
    <value>ArchE</value>
  </data>
  <data name="B0.Text" xml:space="preserve">
    <value>B0</value>
  </data>
  <data name="B1.Text" xml:space="preserve">
    <value>B1</value>
  </data>
  <data name="B2.Text" xml:space="preserve">
    <value>B2</value>
  </data>
  <data name="B3.Text" xml:space="preserve">
    <value>B3</value>
  </data>
  <data name="B4.Text" xml:space="preserve">
    <value>B4</value>
  </data>
  <data name="B5.Text" xml:space="preserve">
    <value>B5</value>
  </data>
  <data name="Custom.Text" xml:space="preserve">
    <value>Custom</value>
  </data>
  <data name="Flsa.Text" xml:space="preserve">
    <value>Flsa</value>
  </data>
  <data name="HalfLetter.Text" xml:space="preserve">
    <value>HalfLetter</value>
  </data>
  <data name="Ledger.Text" xml:space="preserve">
    <value>Ledger</value>
  </data>
  <data name="Legal.Text" xml:space="preserve">
    <value>Legal</value>
  </data>
  <data name="Letter.Text" xml:space="preserve">
    <value>Letter</value>
  </data>
  <data name="Letter11x17.Text" xml:space="preserve">
    <value>Letter11x17</value>
  </data>
  <data name="Note.Text" xml:space="preserve">
    <value>Note</value>
  </data>
  <data name="PdfSettings.Text" xml:space="preserve">
    <value>PDF Settings</value>
  </data>
  <data name="plPageSize.Help" xml:space="preserve">
    <value>Specify the page size for the pdf.</value>
  </data>
  <data name="plPageSize.Text" xml:space="preserve">
    <value>Page Size</value>
  </data>
  <data name="Best.Text" xml:space="preserve">
    <value>Best</value>
  </data>
  <data name="Landscape.Text" xml:space="preserve">
    <value>Landscape</value>
  </data>
  <data name="NoCompression.Text" xml:space="preserve">
    <value>No Compression</value>
  </data>
  <data name="Normal.Text" xml:space="preserve">
    <value>Normal</value>
  </data>
  <data name="plFooterHeight.Help" xml:space="preserve">
    <value>Specify a height for the footer.</value>
  </data>
  <data name="plFooterHeight.Text" xml:space="preserve">
    <value>Footer Height</value>
  </data>
  <data name="plHeaderHeight.Help" xml:space="preserve">
    <value>Specify a height for the header.</value>
  </data>
  <data name="plHeaderHeight.Text" xml:space="preserve">
    <value>Header Height</value>
  </data>
  <data name="plMarginBottom.Help" xml:space="preserve">
    <value>Specify a bottom margin.</value>
  </data>
  <data name="plMarginBottom.Text" xml:space="preserve">
    <value>Margin Bottom</value>
  </data>
  <data name="plMarginLeft.Help" xml:space="preserve">
    <value>Specify a left margin.</value>
  </data>
  <data name="plMarginLeft.Text" xml:space="preserve">
    <value>Margin Left</value>
  </data>
  <data name="plMarginRight.Help" xml:space="preserve">
    <value>Specify a right margin.</value>
  </data>
  <data name="plMarginRight.Text" xml:space="preserve">
    <value>Margin Right</value>
  </data>
  <data name="plMarginTop.Help" xml:space="preserve">
    <value>Specify a top margin.</value>
  </data>
  <data name="plMarginTop.Text" xml:space="preserve">
    <value>Margin Top</value>
  </data>
  <data name="plPageCompression.Help" xml:space="preserve">
    <value>Specify the page compression for the pdf.</value>
  </data>
  <data name="plPageCompression.Text" xml:space="preserve">
    <value>Page Compression</value>
  </data>
  <data name="plPageOrientation.Help" xml:space="preserve">
    <value>Specify the page orientation for the pdf.</value>
  </data>
  <data name="plPageOrientation.Text" xml:space="preserve">
    <value>Page Orientation</value>
  </data>
  <data name="plShowFooter.Help" xml:space="preserve">
    <value>Pick display option for footer.</value>
  </data>
  <data name="plShowFooter.Text" xml:space="preserve">
    <value>Footer Mode</value>
  </data>
  <data name="plShowHeader.Help" xml:space="preserve">
    <value>Pick display option for header.</value>
  </data>
  <data name="plShowHeader.Text" xml:space="preserve">
    <value>Header Mode</value>
  </data>
  <data name="plSuggestedUsername.Text" xml:space="preserve">
    <value>Suggested Handout Username</value>
  </data>
  <data name="Portrait.Text" xml:space="preserve">
    <value>Portrait</value>
  </data>
  <data name="valFooterHeight.ErrorMessage" xml:space="preserve">
    <value>Footer Height is Required</value>
  </data>
  <data name="valFooterHeightIsNumber.ErrorMessage" xml:space="preserve">
    <value>Footer Height must be a Number</value>
  </data>
  <data name="valHeaderHeight.ErrorMessage" xml:space="preserve">
    <value>Header Height is Required</value>
  </data>
  <data name="valHeaderHeightIsNumber.ErrorMessage" xml:space="preserve">
    <value>Header Height must be a Number</value>
  </data>
  <data name="valMarginBottom.ErrorMessage" xml:space="preserve">
    <value>Margin Bottom is Required</value>
  </data>
  <data name="valMarginBottomIsNumber.ErrorMessage" xml:space="preserve">
    <value>Margin Bottom must be a Number</value>
  </data>
  <data name="valMarginLeft.ErrorMessage" xml:space="preserve">
    <value>Margin Left is Required</value>
  </data>
  <data name="valMarginLeftIsNumber.ErrorMessage" xml:space="preserve">
    <value>Margin Left must be a Number</value>
  </data>
  <data name="valMarginRight.ErrorMessage" xml:space="preserve">
    <value>Margin Right is Required</value>
  </data>
  <data name="valMarginRightIsNumber.ErrorMessage" xml:space="preserve">
    <value>Margin Right must be a Number</value>
  </data>
  <data name="valMarginTop.ErrorMessage" xml:space="preserve">
    <value>Margin Top is Required</value>
  </data>
  <data name="valMarginTopIsNumber.ErrorMessage" xml:space="preserve">
    <value>Margin Top must be a Number</value>
  </data>
  <data name="valUsernameIsValid.ErrorMessage" xml:space="preserve">
    <value>Username is invalid.</value>
  </data>
  <data name="plFooterCoverPage.Help" xml:space="preserve">
    <value>Check to show footer on the cover page.</value>
  </data>
  <data name="plFooterCoverPage.Text" xml:space="preserve">
    <value>On Cover Page?</value>
  </data>
  <data name="plHeaderCoverPage.Help" xml:space="preserve">
    <value>Check to show header on the cover page.</value>
  </data>
  <data name="plHeaderCoverPage.Text" xml:space="preserve">
    <value>On Cover Page?</value>
  </data>
  <data name="FooterSettings.Text" xml:space="preserve">
    <value>Footer Settings</value>
  </data>
  <data name="HeaderSettings.Text" xml:space="preserve">
    <value>Header Settings</value>
  </data>
  <data name="plFooterText.Help" xml:space="preserve">
    <value>Specify text to show in the footer, leave blank to use template html.</value>
  </data>
  <data name="plFooterText.Text" xml:space="preserve">
    <value>Footer Text</value>
  </data>
  <data name="plHeaderText.Help" xml:space="preserve">
    <value>Specify text to show in the header, leave blank to use template html.</value>
  </data>
  <data name="plHeaderText.Text" xml:space="preserve">
    <value>Header Text</value>
  </data>
  <data name="plFooterPageNumber.Help" xml:space="preserve">
    <value>Check to show page numbers.</value>
  </data>
  <data name="plFooterPageNumber.Text" xml:space="preserve">
    <value>Page Numbers?</value>
  </data>
  <data name="plFooterTextColor.Help" xml:space="preserve">
    <value>Select the font color for the footer.</value>
  </data>
  <data name="plFooterTextColor.Text" xml:space="preserve">
    <value>Font Color</value>
  </data>
  <data name="plFooterTextFont.Help" xml:space="preserve">
    <value>Select the font for the footer.</value>
  </data>
  <data name="plFooterTextFont.Text" xml:space="preserve">
    <value>Font Type</value>
  </data>
  <data name="plFooterTextSize.Help" xml:space="preserve">
    <value>Select the font size for the footer.</value>
  </data>
  <data name="plFooterTextSize.Text" xml:space="preserve">
    <value>Font Size</value>
  </data>
  <data name="plHeaderTextColor.Help" xml:space="preserve">
    <value>Select the font color for the header.</value>
  </data>
  <data name="plHeaderTextColor.Text" xml:space="preserve">
    <value>Font Color</value>
  </data>
  <data name="plHeaderTextFont.Help" xml:space="preserve">
    <value>Select the font for the header.</value>
  </data>
  <data name="plHeaderTextFont.Text" xml:space="preserve">
    <value>Font Type</value>
  </data>
  <data name="plHeaderTextSize.Help" xml:space="preserve">
    <value>Select the font size for the header.</value>
  </data>
  <data name="plHeaderTextSize.Text" xml:space="preserve">
    <value>Font Size</value>
  </data>
  <data name="TemplateFooter.Text" xml:space="preserve">
    <value>Handout.Footer.html</value>
  </data>
  <data name="TemplateHeader.Text" xml:space="preserve">
    <value>Handout.Header.html</value>
  </data>
  <data name="TextFooter.Text" xml:space="preserve">
    <value>Text</value>
  </data>
  <data name="TextHeader.Text" xml:space="preserve">
    <value>Text</value>
  </data>
  <data name="valFooterTextSize.ErrorMessage" xml:space="preserve">
    <value>Footer Text Size is required.</value>
  </data>
  <data name="valFooterTextSizeIsNumber.ErrorMessage" xml:space="preserve">
    <value>Footer Text Size must be a number.</value>
  </data>
  <data name="valHeaderTextSize.ErrorMessage" xml:space="preserve">
    <value>Header Text Size is required.</value>
  </data>
  <data name="valHeaderTextSizeIsNumber.ErrorMessage" xml:space="preserve">
    <value>Header Text Size must be a number.</value>
  </data>
  <data name="plCategories.Help" xml:space="preserve">
    <value>Select the categories available to users for handout creation.</value>
  </data>
  <data name="plCategories.Text" xml:space="preserve">
    <value>Available Categories</value>
  </data>
  <data name="AllFilter.Text" xml:space="preserve">
    <value>All Categories</value>
  </data>
  <data name="SelectedFilter.Text" xml:space="preserve">
    <value>Selected Categories</value>
  </data>
  <data name="SelectMultiple.Text" xml:space="preserve">
    <value>Hold down ctrl to select multiple categories.</value>
  </data>
  <data name="plPermissions.Help" xml:space="preserve">
    <value>Specify permissions for handouts.</value>
  </data>
  <data name="plPermissions.Text" xml:space="preserve">
    <value>Permissions</value>
  </data>
  <data name="SecuritySettings.Text" xml:space="preserve">
    <value>Security Settings</value>
  </data>
  <data name="Submit.Text" xml:space="preserve">
    <value>Submit</value>
  </data>
</root>