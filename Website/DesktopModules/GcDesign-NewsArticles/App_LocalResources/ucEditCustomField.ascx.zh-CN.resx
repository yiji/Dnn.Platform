<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Caption.Help" xml:space="preserve">
    <value>输入自定义字段的标题(添加文章界面显示)</value>
  </data>
  <data name="Caption.Text" xml:space="preserve">
    <value>标题</value>
  </data>
  <data name="CaptionHelp.Help" xml:space="preserve">
    <value>输入标题说明</value>
  </data>
  <data name="CaptionHelp.Text" xml:space="preserve">
    <value>标题说明</value>
  </data>
  <data name="CheckBox.Text" xml:space="preserve">
    <value>复选框</value>
  </data>
  <data name="Confirmation.Text" xml:space="preserve">
    <value>确定删除此自定义字段?</value>
  </data>
  <data name="ControlTitle_editcustomfield.Text" xml:space="preserve">
    <value>编辑自定义字段</value>
  </data>
  <data name="Currency.Text" xml:space="preserve">
    <value>货币</value>
  </data>
  <data name="CustomFieldDetails.Text" xml:space="preserve">
    <value>自定义字段详情</value>
  </data>
  <data name="CustomFieldDetailsDescription.Text" xml:space="preserve">
    <value>输入自定义字段的详细设置然后点击"更新".</value>
  </data>
  <data name="Date.Text" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="DefaultValue.Help" xml:space="preserve">
    <value>输入自定义字段的默认值</value>
  </data>
  <data name="DefaultValue.Text" xml:space="preserve">
    <value>默认值</value>
  </data>
  <data name="Double.Text" xml:space="preserve">
    <value>Double</value>
  </data>
  <data name="DropDownList.Text" xml:space="preserve">
    <value>下拉列表</value>
  </data>
  <data name="Email.Text" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="FieldElementHelp.Text" xml:space="preserve">
    <value>将值用“|”分割, 例如： House|Land|Unit</value>
  </data>
  <data name="FieldElements.Help" xml:space="preserve">
    <value>输入字段元素使用“|”分隔, 例如： House|Land|Unit</value>
  </data>
  <data name="FieldElements.Text" xml:space="preserve">
    <value>字段元素(成员)</value>
  </data>
  <data name="FieldType.Help" xml:space="preserve">
    <value>为自定义字段选一个数据类型</value>
  </data>
  <data name="FieldType.Text" xml:space="preserve">
    <value>字段类型</value>
  </data>
  <data name="Integer.Text" xml:space="preserve">
    <value>Integer</value>
  </data>
  <data name="ModuleHelp.Text" xml:space="preserve">
    <value>&lt;h1&gt;编辑自定义字段&lt;/h1&gt;&lt;p&gt;允许管理员编辑或添加自定义字段。&lt;/p&gt;</value>
  </data>
  <data name="MultiCheckBox.Text" xml:space="preserve">
    <value>多行复选框</value>
  </data>
  <data name="MultiLineTextBox.Text" xml:space="preserve">
    <value>多行文本</value>
  </data>
  <data name="Name.Help" xml:space="preserve">
    <value>输入自定义字段的名称(数据库)</value>
  </data>
  <data name="Name.Text" xml:space="preserve">
    <value>名称</value>
  </data>
  <data name="OneLineTextBox.Text" xml:space="preserve">
    <value>单行文本</value>
  </data>
  <data name="plMaximumLength.Help" xml:space="preserve">
    <value>字符最大长度</value>
  </data>
  <data name="plMaximumLength.Text" xml:space="preserve">
    <value>最大长度</value>
  </data>
  <data name="plRegex.Help" xml:space="preserve">
    <value>输入正则表达式来进行验证。</value>
  </data>
  <data name="plRegex.Text" xml:space="preserve">
    <value>正则表达式</value>
  </data>
  <data name="RadioButton.Text" xml:space="preserve">
    <value>单选按钮</value>
  </data>
  <data name="Regex.Text" xml:space="preserve">
    <value>正则表达式</value>
  </data>
  <data name="Required.Help" xml:space="preserve">
    <value>选中则此字段必填</value>
  </data>
  <data name="Required.Text" xml:space="preserve">
    <value>必填?</value>
  </data>
  <data name="RequiredDetails.Text" xml:space="preserve">
    <value>详细信息</value>
  </data>
  <data name="RequiredDetailsDescription.Text" xml:space="preserve">
    <value>详细设置</value>
  </data>
  <data name="RichTextBox.Text" xml:space="preserve">
    <value>富文本编辑器</value>
  </data>
  <data name="ValidationType.Help" xml:space="preserve">
    <value>选择自定义字段的验证类型</value>
  </data>
  <data name="ValidationType.Text" xml:space="preserve">
    <value>字段的验证类型</value>
  </data>
  <data name="Visible.Help" xml:space="preserve">
    <value>当使用[CUSTOMFIELDS]标记，检查自定义字段是否可见。</value>
  </data>
  <data name="Visible.Text" xml:space="preserve">
    <value>可见?</value>
  </data>
  <data name="valCaption.Text" xml:space="preserve">
    <value>&lt;br&gt;您必须输入一个有效的标题。</value>
  </data>
  <data name="ColorPicker.Text" xml:space="preserve">
    <value>拾色器</value>
  </data>
  <data name="ID.Help" xml:space="preserve">
    <value>自定义字段ID</value>
  </data>
  <data name="ID.Text" xml:space="preserve">
    <value>字段ID</value>
  </data>
</root>